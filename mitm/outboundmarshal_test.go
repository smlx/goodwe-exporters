package mitm

import (
	"testing"

	"github.com/alecthomas/assert/v2"
)

func TestUnmarshalMeterMetrics(t *testing.T) {
	var testCases = map[string]struct {
		input   []byte
		metrics OutboundMeterMetricsPacket
	}{
		"metrics": {
			input: []byte{
				// 0x50, 0x4f, 0x53, 0x54, 0x47, 0x57, 0x00, 0x00, 0x00, 0x99, 0x03, 0x04,
				0x00, 0x00, 0x39, 0x31,
				0x30, 0x30, 0x30, 0x48, 0x4b, 0x55, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x17, 0x09,
				0x12, 0x09, 0x09, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x09,
				0x12, 0x09, 0x09, 0x1b, 0xde, 0xde, 0x93, 0x57, 0xfe, 0x05, 0x28, 0x76, 0x42, 0xac, 0x63, 0xcf,
				0xdd, 0x7a, 0xae, 0x6d, 0xca, 0x77, 0x85, 0xca, 0x23, 0x99, 0x4c, 0x72, 0x7d, 0x33, 0x59, 0x81,
				0x3b, 0xc8, 0xf2, 0x37, 0x22, 0x69, 0x71, 0x9d, 0xc8, 0x46, 0x62, 0xa2, 0xc0, 0xef, 0xe7, 0x44,
				0xb3, 0x58, 0x2a, 0x2f, 0xbd, 0x2f, 0x68, 0x4c, 0xe0, 0x98, 0x0b, 0x24, 0xbf, 0x04, 0xc4, 0x4f,
				0xa8, 0x01, 0x81, 0x8c, 0xf6, 0x5f, 0x05, 0x52, 0x73, 0x86, 0x32, 0xaa, 0x16, 0xd2, 0x9f, 0xfe,
				0x0e, 0x52, 0xb3, 0xcc, 0x9f, 0x0a, 0xaf, 0xef, 0x6d, 0x28, 0xce, 0xad, 0x52, 0xe7, 0x9f, 0x7f,
				0x9b, 0xe3, 0x3c, 0xa0, 0x1b, 0x22, 0xc9, 0x59, 0x33, 0x04, 0xf2, 0x39, 0x8d, 0xd1, 0x20, 0xfc,
				0x88, 0xaa, 0x1d, 0x99,
				// 0x4b, 0xcd,
			},
			metrics: OutboundMeterMetricsPacket{
				OutboundEnvelopeTS: OutboundEnvelopeTS{
					DeviceID:     [8]byte{0x39, 0x31, 0x30, 0x30, 0x30, 0x48, 0x4b, 0x55},
					DeviceSerial: [8]byte([]byte(testDeviceSerial)),
				},
				OutboundMeterMetrics: OutboundMeterMetrics{
					PowerGenerationWatts: 2601,
					PowerExportWatts:     1557,
				},
			},
		},
	}
	for name, tc := range testCases {
		t.Run(name, func(tt *testing.T) {
			var metrics OutboundMeterMetricsPacket
			assert.NoError(tt, metrics.UnmarshalBinary(tc.input))
			assert.Equal(tt, metrics.DeviceID, tc.metrics.DeviceID)
			assert.Equal(tt, metrics.PowerGenerationWatts, tc.metrics.PowerGenerationWatts)
			assert.Equal(tt, metrics.PowerExportWatts, tc.metrics.PowerExportWatts)
			assert.Equal(tt, metrics.DeviceSerial, tc.metrics.DeviceSerial)
		})
	}
}

func TestMarshalMeterMetrics(t *testing.T) {
	var testCases = map[string]struct {
		metrics OutboundMeterMetricsPacket
		data    []byte
	}{
		"metrics": {
			metrics: OutboundMeterMetricsPacket{
				OutboundEnvelopeTS: OutboundEnvelopeTS{
					DeviceID:     [8]byte{0x39, 0x31, 0x30, 0x30, 0x30, 0x48, 0x4b, 0x55},
					DeviceSerial: [8]byte([]byte(testDeviceSerial)),
					IV: [16]byte{
						0x17, 0x09, 0x12, 0x09, 0x09, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
					Timestamp: [6]byte{0x17, 0x09, 0x12, 0x09, 0x09, 0x1b},
				},
				OutboundMeterMetrics: OutboundMeterMetrics{
					PacketType: [7]byte{
						0x04, 0x08, 0x00, 0x08, 0x17, 0x00, 0x00,
					},
					EnergyExportDecawattHoursTotal:                   27078,
					EnergyGenerationDecawattHoursTotal:               57941,
					SumOfEnergyGenerationAndExportDecawattHoursTotal: 78340,
					EnergyImportDecawattHoursTotal:                   80155,
					UnknownBytes4: [16]byte{
						0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
					},
					SumOfEnergyImportLessGenerationDecawattHoursTotal: 7948,
					UnknownInt5:                        137365568,
					UnknownInt6:                        2438,
					UnknownInt7:                        2440,
					UnknownInt9:                        660,
					UnknownInt10:                       1092,
					PowerExportWatts:                   1557,
					PowerGenerationWatts:               2601,
					SumOfPowerGenerationAndExportWatts: 4159,
					UnknownBytes5: [21]byte{
						0x15, 0x00, 0x15, 0x03, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x16, 0x00, 0x16, 0x00,
						0x00, 0x02, 0xff, 0xff, 0xff,
					},
				},
			},
			data: []byte{
				// packet is copied from outbound_test.go
				// 0x50, 0x4f, 0x53, 0x54, 0x47, 0x57, 0x00, 0x00, 0x00, 0x99, 0x03, 0x04,
				0x00, 0x00, 0x39, 0x31,
				0x30, 0x30, 0x30, 0x48, 0x4b, 0x55, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x17, 0x09,
				0x12, 0x09, 0x09, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x09,
				0x12, 0x09, 0x09, 0x1b, 0xde, 0xde, 0x93, 0x57, 0xfe, 0x05, 0x28, 0x76, 0x42, 0xac, 0x63, 0xcf,
				0xdd, 0x7a, 0xae, 0x6d, 0xca, 0x77, 0x85, 0xca, 0x23, 0x99, 0x4c, 0x72, 0x7d, 0x33, 0x59, 0x81,
				0x3b, 0xc8, 0xf2, 0x37, 0x22, 0x69, 0x71, 0x9d, 0xc8, 0x46, 0x62, 0xa2, 0xc0, 0xef, 0xe7, 0x44,
				0xb3, 0x58, 0x2a, 0x2f, 0xbd, 0x2f, 0x68, 0x4c, 0xe0, 0x98, 0x0b, 0x24, 0xbf, 0x04, 0xc4, 0x4f,
				0xa8, 0x01, 0x81, 0x8c, 0xf6, 0x5f, 0x05, 0x52, 0x73, 0x86, 0x32, 0xaa, 0x16, 0xd2, 0x9f, 0xfe,
				0x0e, 0x52, 0xb3, 0xcc, 0x9f, 0x0a, 0xaf, 0xef, 0x6d, 0x28, 0xce, 0xad, 0x52, 0xe7, 0x9f, 0x7f,
				0x9b, 0xe3, 0x3c, 0xa0, 0x1b, 0x22, 0xc9, 0x59, 0x33, 0x04, 0xf2, 0x39, 0x8d, 0xd1, 0x20, 0xfc,
				0x88, 0xaa, 0x1d, 0x99,
				//	0x4b, 0xcd,
			},
		},
	}
	for name, tc := range testCases {
		t.Run(name, func(tt *testing.T) {
			data, err := tc.metrics.MarshalBinary()
			assert.NoError(tt, err)
			assert.Equal(tt, data, tc.data)
		})
	}
}

func TestUnmarshalInverterMetrics0(t *testing.T) {
	var testCases = map[string]struct {
		input   []byte
		metrics OutboundInverterMetrics0Packet
	}{
		"inverter metrics0 0": {
			input: []byte{
				0x00, 0x00, 0x35, 0x33, 0x30, 0x30, 0x30, 0x44, 0x53, 0x43, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
				0x36, 0x37, 0x17, 0x0c, 0x0f, 0x10, 0x14, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x17, 0x0c, 0x0f, 0x10, 0x14, 0x36, 0x99, 0x8b, 0x11, 0x33, 0x2f, 0x05, 0xe0, 0x0a,
				0x48, 0xd4, 0x82, 0x21, 0x24, 0x38, 0xd3, 0x82, 0xdb, 0xf9, 0x24, 0x55, 0x63, 0x80, 0x88, 0x08,
				0x05, 0xaf, 0x85, 0x8d, 0xf2, 0x97, 0xbc, 0x82, 0xfa, 0xd9, 0x97, 0xe7, 0x7c, 0x4e, 0xe4, 0x20,
				0x67, 0x93, 0xaf, 0xd4, 0x9c, 0xf9, 0x6d, 0x05, 0x77, 0x43, 0x7b, 0xaa, 0x53, 0x73, 0x07, 0xda,
				0x81, 0x38, 0x6b, 0x92, 0xec, 0xe8, 0xab, 0x2f, 0x4e, 0x2b, 0xdc, 0xeb, 0x67, 0x09, 0xaa, 0xac,
				0x77, 0xb9, 0xc1, 0x93, 0x69, 0xa7, 0x1c, 0xc3, 0x43, 0xe5, 0x07, 0xe2, 0xbb, 0xd8, 0x5b, 0xf2,
				0x62, 0x6c, 0xa2, 0xbf, 0xc7, 0x14, 0x87, 0x87, 0xfc, 0xf3, 0xfa, 0x75, 0x37, 0xb9, 0x19, 0x76,
				0xcc, 0x04, 0xd3, 0x3c, 0xb6, 0xf3, 0xfc, 0xb9, 0x16, 0x6e, 0x02, 0x8e, 0x9d, 0x5a, 0x18, 0xc5,
				0x23, 0x17, 0x89, 0x1a, 0x9e, 0x3e, 0xda, 0x2b, 0x55, 0x1e, 0x41, 0x17, 0xc8, 0x10, 0x44, 0xe4,
				0x29, 0x75, 0x5e, 0xb1, 0xcc, 0x0a, 0x25, 0xf3, 0x16, 0x30, 0x22, 0xdb, 0x04, 0x7a, 0xa5, 0xeb,
				0x83, 0x0e, 0x5e, 0x9e, 0x9e, 0x3c, 0xdf, 0x0e, 0xd7, 0x4e, 0x70, 0x41, 0x07, 0xff, 0x75, 0x57,
				0xed, 0x05, 0x61, 0x4b, 0x24, 0x22, 0x80, 0x8b, 0x29, 0x38, 0xb7, 0x92, 0x79, 0x83, 0x86, 0xfb,
				0xd9, 0xd4, 0xbd, 0xa1, 0x82, 0x2b, 0x7b, 0x79, 0x03, 0x48, 0xe9, 0xc1, 0x5c, 0xb4, 0xb6, 0xba,
				0x1c, 0x9b, 0x67, 0x13, 0xec, 0x47, 0x06, 0xcb, 0xc0, 0xb1, 0x00, 0x97, 0x0c, 0x53, 0xfe, 0x62,
				0xe6, 0xef, 0xfb, 0x3d, 0x3b, 0x73, 0x1f, 0xe8, 0xdf, 0x6c, 0x04, 0xda, 0x9a, 0x0d, 0x7c, 0xeb,
				0xae, 0xab, 0xfc, 0xc9, 0x7b, 0x0f, 0x68, 0xdd, 0xc5, 0xf9, 0x9a, 0x77, 0x1f, 0x7a, 0x44, 0xca,
				0xfe, 0x28, 0xb1, 0x0a, 0x5f, 0x45, 0x30, 0xc2, 0x12, 0x4f, 0x08, 0xea, 0x6e, 0x72, 0x22, 0xc8,
				0x58, 0xbb, 0x84, 0xa7, 0x19, 0x61, 0x3c, 0x77, 0x95, 0x30, 0xce, 0x5d, 0xa1, 0x39, 0x6d, 0x6b,
				0xc2, 0x2f, 0x39, 0x73, 0x6d, 0xb3, 0x58, 0x81, 0xa6, 0xf8, 0x19, 0x77, 0x07, 0x44, 0xdc, 0x52,
				0x63, 0xef, 0xab, 0x8e, 0x2d, 0xb3, 0x8a, 0x12, 0x56, 0x88, 0x1a, 0x31, 0x51, 0xcd, 0x7f, 0xec,
				0x29, 0x5a, 0x16, 0x64, 0x64, 0x47, 0x0e, 0x59, 0xd0, 0xc9, 0xd2, 0xa6, 0xf8, 0x95, 0x1b, 0xae,
				0xd7, 0x88, 0x8e, 0x6f, 0x8c, 0x7d, 0x09, 0x95, 0x2a, 0xc6, 0xee, 0x0c, 0x99, 0x37, 0x32, 0xbb,
				0x4c, 0x23, 0x91, 0x25, 0xd1, 0xd1, 0xd1, 0x7d, 0x7a, 0x4e, 0x64, 0x13, 0x3c, 0x40, 0x46, 0x5a,
				0xbc, 0x96, 0xdf, 0x70, 0xd0, 0xeb, 0xda, 0x32, 0x66, 0x6c, 0x97, 0xf6, 0x50, 0xff, 0x51, 0x31,
				0xd6, 0xb2, 0x25, 0xd6, 0x5c, 0x21, 0x93, 0x75, 0x89, 0x75, 0xde, 0x44, 0xd8, 0xa6, 0x8b, 0x0b,
				0xd9, 0x9b, 0xb1, 0x65, 0xba, 0x5a, 0xb6, 0xf2, 0x27, 0xdf, 0xc2, 0x96, 0xcd, 0x83, 0xc7, 0xe5,
				0x70, 0xb5, 0x35, 0x48, 0x67, 0x2b, 0x3e, 0x62, 0x40, 0x18, 0xe7, 0x17, 0x1b, 0xc3, 0xa0, 0xa7,
				0x25, 0x16, 0xe4, 0x42, 0x30, 0x40, 0xc8, 0x42, 0x90, 0x12, 0xe9, 0x17, 0xac, 0xa9, 0x77, 0x17,
				0x77, 0xf6, 0x41, 0x00, 0x8d, 0xfd, 0x3f, 0x62, 0x16, 0x7e, 0xd3, 0x54, 0x51, 0x81, 0xd6, 0xa8,
				0x1d, 0x87, 0xa1, 0xf5, 0xbb, 0x71, 0x22, 0xb6, 0x99, 0x1f, 0xea, 0x48, 0xf6, 0x79, 0x52, 0x16,
				0xe5, 0x34, 0xc7, 0x6d, 0xda, 0xed, 0xf4, 0x69, 0x5c, 0x4a, 0x3c, 0x8e, 0x8d, 0x76, 0x55, 0x76,
				0x39, 0xd1, 0x9a, 0x40, 0x18, 0x15, 0xd6, 0x96,
			},
			metrics: OutboundInverterMetrics0Packet{
				OutboundEnvelopeTS: OutboundEnvelopeTS{
					DeviceID:     [8]byte{0x35, 0x33, 0x30, 0x30, 0x30, 0x44, 0x53, 0x43},
					DeviceSerial: [8]byte([]byte(testDeviceSerial)),
				},
				OutboundInverterMetrics0: OutboundInverterMetrics0{
					outboundInverterMetricsCommon1: outboundInverterMetricsCommon1{
						UptimeHoursTotal: 1667,
					},
				},
			},
		},
		"inverter metrics0 1": {
			input: []byte{
				0x00, 0x00, 0x35, 0x33, 0x30, 0x30, 0x30, 0x44, 0x53, 0x43, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
				0x36, 0x37, 0x17, 0x0c, 0x0f, 0x11, 0x05, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x17, 0x0c, 0x0f, 0x11, 0x05, 0x3a, 0x86, 0xca, 0xed, 0x08, 0x15, 0x8a, 0x4f, 0x76,
				0xa5, 0x05, 0xe4, 0xec, 0x29, 0x58, 0x6f, 0xc4, 0xcf, 0x2b, 0x6e, 0xea, 0x88, 0x7a, 0x7c, 0x3d,
				0x6e, 0x0c, 0xc3, 0x03, 0x94, 0xf6, 0xc5, 0x31, 0x96, 0x6b, 0xad, 0xf7, 0x33, 0x89, 0x4a, 0xba,
				0xde, 0x04, 0x25, 0x06, 0x5f, 0x4e, 0xd2, 0xbd, 0xe6, 0x31, 0x0b, 0x1c, 0xcd, 0x92, 0x20, 0xad,
				0x2d, 0x3b, 0xd9, 0x19, 0x0d, 0x46, 0xf0, 0xdb, 0xfa, 0xfe, 0x56, 0x57, 0x11, 0xee, 0xcf, 0xca,
				0xa2, 0x37, 0xaa, 0xa1, 0x68, 0x72, 0x31, 0x7b, 0xf8, 0xee, 0x50, 0x47, 0x10, 0xcf, 0xff, 0xbc,
				0x19, 0xed, 0xe9, 0x55, 0x2e, 0xb7, 0xf1, 0x1f, 0x90, 0x0d, 0x68, 0xae, 0x96, 0x83, 0xe7, 0x89,
				0x2b, 0xa9, 0x79, 0xb3, 0x37, 0x97, 0x41, 0xe5, 0xab, 0xc5, 0xba, 0xbb, 0x2e, 0x51, 0x09, 0x1a,
				0x99, 0x6a, 0x1e, 0xec, 0x83, 0xc5, 0x5e, 0x2d, 0x47, 0x2e, 0x8e, 0xd7, 0x66, 0x3a, 0x8f, 0x9b,
				0xc3, 0xda, 0xcd, 0xfe, 0x4b, 0xff, 0x07, 0x05, 0xa7, 0x68, 0x18, 0xab, 0x51, 0x0e, 0x59, 0x46,
				0xc6, 0x96, 0x0d, 0xc8, 0xd3, 0x75, 0x72, 0x83, 0x59, 0x96, 0x49, 0x51, 0x54, 0x94, 0x9c, 0x34,
				0x03, 0xd8, 0x5d, 0x60, 0x5f, 0xc2, 0x20, 0xec, 0xcf, 0x99, 0x23, 0xa7, 0xc4, 0x11, 0x91, 0x0a,
				0x76, 0xd8, 0x8a, 0x5c, 0xfd, 0x5e, 0xcb, 0x8f, 0x08, 0xcd, 0xbf, 0x26, 0xa5, 0xe3, 0x50, 0x3e,
				0x87, 0x2d, 0x7f, 0x91, 0x70, 0xec, 0x44, 0x3e, 0xd1, 0x1c, 0xf8, 0x29, 0x33, 0x01, 0x63, 0x04,
				0xe3, 0xdb, 0xf2, 0x08, 0x92, 0xd0, 0xf3, 0xc9, 0x59, 0xbe, 0x2c, 0x2a, 0x6b, 0xa2, 0x6d, 0xa4,
				0x1e, 0x3f, 0x33, 0xd7, 0xba, 0x39, 0x75, 0x70, 0x29, 0x89, 0x77, 0xf2, 0xf3, 0xa7, 0x68, 0xd4,
				0xf6, 0xdb, 0xf0, 0x6f, 0xd6, 0xcd, 0x61, 0x75, 0x22, 0xc2, 0x79, 0x4b, 0x67, 0x91, 0x2c, 0x58,
				0xee, 0x90, 0x3d, 0xe0, 0x35, 0xb4, 0x64, 0xf6, 0x19, 0x7e, 0x17, 0x7b, 0x96, 0xc9, 0x98, 0x4f,
				0x73, 0x33, 0xd6, 0x30, 0x43, 0x94, 0xab, 0x04, 0x6c, 0xd1, 0xbd, 0x5c, 0xd9, 0xaf, 0x08, 0x07,
				0xc4, 0x80, 0xef, 0xcd, 0xd8, 0x38, 0x43, 0xae, 0x99, 0x33, 0x73, 0x14, 0x4d, 0xc4, 0x16, 0x02,
				0x5b, 0x74, 0x54, 0x46, 0x35, 0x94, 0x30, 0x17, 0xa3, 0x28, 0xdd, 0x21, 0x80, 0xa8, 0x92, 0x66,
				0x96, 0x3a, 0xa1, 0xba, 0x01, 0xeb, 0x72, 0x2d, 0xd6, 0xec, 0x1c, 0x9e, 0xf0, 0x2c, 0x66, 0x21,
				0x46, 0x35, 0x49, 0x7c, 0xd3, 0xb4, 0xc2, 0x71, 0x4c, 0x07, 0xa2, 0xf3, 0x2c, 0x3b, 0x19, 0x28,
				0x2a, 0x37, 0x8a, 0x8c, 0xf1, 0x8d, 0x93, 0x85, 0x9e, 0xea, 0x66, 0xe8, 0xfb, 0x6a, 0xfe, 0x7b,
				0x29, 0x73, 0x41, 0x73, 0x70, 0x47, 0x61, 0x31, 0x5f, 0xc2, 0xd2, 0x99, 0x9c, 0xe5, 0x31, 0xcf,
				0x20, 0xb8, 0x2b, 0xf3, 0x02, 0x45, 0x1c, 0xe0, 0xb2, 0x29, 0xef, 0x6b, 0x18, 0xd0, 0xbf, 0xf2,
				0x2f, 0x40, 0xdb, 0xe6, 0x6c, 0x67, 0xd2, 0x12, 0x2d, 0x1b, 0x88, 0xf2, 0xf0, 0x53, 0xf2, 0x30,
				0x73, 0xc3, 0xe8, 0x7d, 0x8a, 0x3e, 0x0b, 0xfd, 0x10, 0x46, 0xa8, 0x12, 0x30, 0xe6, 0xfc, 0x47,
				0x44, 0x8d, 0xda, 0xc5, 0x11, 0x5d, 0x36, 0x14, 0x87, 0xa2, 0x1b, 0xb0, 0xa7, 0x4a, 0x55, 0x09,
				0xd0, 0xb6, 0xa6, 0x28, 0x3d, 0x5c, 0x05, 0x21, 0x50, 0x3f, 0x59, 0x6b, 0x8b, 0x9a, 0x15, 0x95,
				0x39, 0xb3, 0xf6, 0xb2, 0x77, 0x74, 0x65, 0x17, 0x84, 0xa4, 0x30, 0xc7, 0xc4, 0xf3, 0x16, 0xf2,
				0x40, 0x48, 0xe6, 0xb4, 0x92, 0x3c, 0x9b, 0x29,
			},
			metrics: OutboundInverterMetrics0Packet{
				OutboundEnvelopeTS: OutboundEnvelopeTS{
					DeviceID:     [8]byte{0x35, 0x33, 0x30, 0x30, 0x30, 0x44, 0x53, 0x43},
					DeviceSerial: [8]byte([]byte(testDeviceSerial)),
				},
				OutboundInverterMetrics0: OutboundInverterMetrics0{
					outboundInverterMetricsCommon1: outboundInverterMetricsCommon1{
						UptimeHoursTotal: 1668,
					},
				},
			},
		},
	}
	for name, tc := range testCases {
		t.Run(name, func(tt *testing.T) {
			var metrics OutboundInverterMetrics0Packet
			assert.NoError(tt, metrics.UnmarshalBinary(tc.input), name)
			assert.Equal(tt, metrics.DeviceID, tc.metrics.DeviceID, name)
			assert.Equal(tt, metrics.DeviceSerial, tc.metrics.DeviceSerial, name)
			assert.Equal(tt, metrics.UptimeHoursTotal, tc.metrics.UptimeHoursTotal, name)
			// spew.Dump(metrics)
		})
	}
}

func TestUnmarshalInverterMetrics1(t *testing.T) {
	var testCases = map[string]struct {
		input   []byte
		metrics OutboundInverterMetrics1Packet
	}{
		"inverter metrics1": {
			input: []byte{
				// 0x50, 0x4f, 0x53, 0x54, 0x47, 0x57, 0x00, 0x00, 0x01, 0x89, 0x01, 0x45,
				0x00, 0x00, 0x35, 0x33,
				0x30, 0x30, 0x30, 0x44, 0x53, 0x43, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x17, 0x0c,
				0x0f, 0x0d, 0x15, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x0c,
				0x0f, 0x0d, 0x15, 0x25, 0xee, 0xd9, 0x1e, 0xc5, 0x49, 0xe9, 0x24, 0x9f, 0x5a, 0xe1, 0xfa, 0x20,
				0x2e, 0x8e, 0xbb, 0xc4, 0xe7, 0x4e, 0x48, 0xf7, 0x00, 0x71, 0xdf, 0x5e, 0x9d, 0x81, 0xd1, 0x1e,
				0xef, 0xde, 0x17, 0xbd, 0xe8, 0xef, 0x9c, 0x99, 0x08, 0xfd, 0x84, 0x78, 0x10, 0x76, 0xed, 0x65,
				0x68, 0x25, 0x02, 0x69, 0x5d, 0xf7, 0x42, 0x90, 0x30, 0xc5, 0x4b, 0xb2, 0x61, 0xdf, 0x59, 0x2b,
				0x40, 0x99, 0x01, 0x68, 0xa4, 0xdb, 0xfe, 0x38, 0x71, 0x77, 0xdf, 0x40, 0x7c, 0x1c, 0xed, 0x23,
				0x91, 0x4f, 0x95, 0xde, 0x9b, 0x74, 0x67, 0x44, 0x8c, 0xc8, 0xf1, 0xc0, 0xac, 0xc2, 0x20, 0x3c,
				0xff, 0x0b, 0xad, 0x3c, 0x5f, 0xb6, 0x67, 0xb2, 0xc8, 0x12, 0x1d, 0x17, 0x85, 0x7a, 0x0b, 0xfc,
				0x8a, 0x2d, 0x1d, 0x8b, 0xe4, 0x83, 0xe9, 0xb1, 0xf4, 0x4d, 0x9d, 0x29, 0xb4, 0x5f, 0x23, 0x99,
				0x03, 0xf2, 0xcf, 0x2f, 0xe7, 0xed, 0x7e, 0x22, 0xf5, 0xe6, 0x59, 0x0c, 0x97, 0x73, 0x87, 0x56,
				0xc6, 0x87, 0x37, 0x65, 0x9b, 0xea, 0x82, 0x8e, 0x60, 0xf0, 0x62, 0x60, 0xbc, 0xd3, 0x06, 0x65,
				0x47, 0x04, 0x81, 0xc3, 0xf7, 0xbc, 0x5a, 0xaa, 0xe1, 0x63, 0x23, 0xcc, 0xbd, 0xfe, 0xdc, 0x72,
				0xcb, 0x93, 0x40, 0xac, 0x12, 0xf7, 0x12, 0x2e, 0xa2, 0xb1, 0x98, 0x5a, 0x96, 0x10, 0x18, 0x71,
				0x1f, 0xfa, 0xd9, 0x50, 0xae, 0x0c, 0x7a, 0x14, 0x1c, 0xf1, 0x6e, 0x62, 0xec, 0x2b, 0x5f, 0xf0,
				0xfd, 0x07, 0x22, 0x62, 0x21, 0x42, 0xfe, 0xd7, 0x76, 0xde, 0xa4, 0x44, 0x97, 0x3b, 0xbb, 0x03,
				0xfe, 0x29, 0xaf, 0xe8, 0x4b, 0x8d, 0x6d, 0x77, 0x49, 0x7b, 0xb7, 0x32, 0xe2, 0x09, 0xdb, 0xd7,
				0x4c, 0x19, 0x90, 0x3d, 0x89, 0x0e, 0x3d, 0x3d, 0xa6, 0x53, 0xfd, 0x26, 0xcb, 0x26, 0x38, 0x3c,
				0x4c, 0x5b, 0x70, 0x6a, 0xf2, 0xba, 0xa5, 0xed, 0x2a, 0x8f, 0x01, 0x8a, 0x4e, 0x09, 0x92, 0x1a,
				0x69, 0xa5, 0xbe, 0xc0, 0x8c, 0x56, 0x7a, 0x5b, 0x01, 0x97, 0x7b, 0xd8, 0xfd, 0xb7, 0x86, 0x18,
				0x26, 0x5b, 0x61, 0xf2, 0x9f, 0xad, 0xc7, 0xbc, 0xf3, 0x78, 0x1f, 0x5a, 0x50, 0xe5, 0x01, 0xfe,
				0x20, 0x1a, 0xc5, 0xc8, 0xef, 0xf1, 0x54, 0x69, 0x4d, 0x56, 0x0f, 0x77, 0xa7, 0xce, 0x81, 0x53,
				0x8b, 0x97, 0x9d, 0x3e, 0xf8, 0xee, 0x4c, 0x42, 0x88, 0x67, 0x55, 0xf1, 0x07, 0x32, 0xcb, 0x01,
				0xfa, 0x13, 0x56, 0x0f, 0x84, 0xb8, 0x40, 0x0c, 0xc0, 0x66, 0x25, 0x6d, 0x34, 0x94, 0x7e, 0x43,
				0x3c, 0xb3, 0xda, 0x5b,
				// 0xff, 0xff,
			},
			metrics: OutboundInverterMetrics1Packet{
				OutboundEnvelopeTS: OutboundEnvelopeTS{
					DeviceID:     [8]byte{0x35, 0x33, 0x30, 0x30, 0x30, 0x44, 0x53, 0x43},
					DeviceSerial: [8]byte([]byte(testDeviceSerial)),
				},
				OutboundInverterMetrics1: OutboundInverterMetrics1{
					outboundInverterMetricsCommon1: outboundInverterMetricsCommon1{
						UptimeHoursTotal: 1664,
					},
				},
			},
		},
	}
	for name, tc := range testCases {
		t.Run(name, func(tt *testing.T) {
			var metrics OutboundInverterMetrics1Packet
			assert.NoError(tt, metrics.UnmarshalBinary(tc.input), name)
			assert.Equal(tt, metrics.DeviceID, tc.metrics.DeviceID, name)
			assert.Equal(tt, metrics.DeviceSerial, tc.metrics.DeviceSerial, name)
			assert.Equal(tt, metrics.UptimeHoursTotal, tc.metrics.UptimeHoursTotal, name)
			// spew.Dump(metrics)
		})
	}
}

func TestUnmarshalInverterTimeSync(t *testing.T) {
	var testCases = map[string]struct {
		input    []byte
		timeSync OutboundInverterTimeSyncPacket
	}{
		"inverter time sync": {
			input: []byte{
				// 0x50, 0x4f, 0x53, 0x54, 0x47, 0x57, 0x00, 0x00, 0x03, 0x09, 0x01, 0x03,
				0x00, 0x00, 0x35, 0x33,
				0x30, 0x30, 0x30, 0x44, 0x53, 0x43, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x17, 0x0c,
				0x13, 0x0e, 0x0e, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x0c,
				0x13, 0x0e, 0x0e, 0x31, 0xa0, 0x6f, 0x5c, 0xe8, 0xde, 0x37, 0x89, 0xd2, 0x2d, 0xfa, 0xe1, 0x17,
				0xbb, 0xd4, 0x2c, 0x79, 0x46, 0x8e, 0xc8, 0xd4, 0xae, 0x44, 0x30, 0x95, 0x52, 0x78, 0xf5, 0xcf,
				0x35, 0xa5, 0x9a, 0xf8, 0x2f, 0xb8, 0x0a, 0x8a, 0xf1, 0x68, 0x97, 0xe6, 0x71, 0x06, 0x7b, 0x33,
				0x08, 0xee, 0x44, 0xf1, 0x04, 0x14, 0xa2, 0x72, 0x9c, 0xda, 0x3b, 0xc7, 0xa7, 0x45, 0x7d, 0x69,
				0x3b, 0xed, 0x27, 0x49, 0xf7, 0xd8, 0x59, 0xe2, 0x16, 0x52, 0xdc, 0x96, 0x8d, 0x35, 0xb0, 0xc9,
				0x7c, 0x50, 0xfd, 0xd9, 0x24, 0xd9, 0xfa, 0x0a, 0xf6, 0x35, 0x44, 0x18, 0x2e, 0x5b, 0x3f, 0xa7,
				0xb2, 0x3e, 0x4e, 0x68, 0x4a, 0x56, 0x90, 0x6e, 0xb8, 0xfb, 0xe5, 0xe2, 0xdd, 0xd6, 0xa5, 0xc0,
				0x3f, 0xb1, 0x3f, 0x72, 0xaa, 0x84, 0x1c, 0x7e, 0xa7, 0xe4, 0x5d, 0xf7, 0xf1, 0xe6, 0xfb, 0xcf,
				0x2a, 0x55, 0xff, 0xb4, 0xb3, 0xa0, 0x8f, 0x5c, 0x1c, 0xff, 0x80, 0xae, 0xed, 0x11, 0xf8, 0x3d,
				0x3e, 0x09, 0xb6, 0x89, 0x14, 0x4b, 0x47, 0x0c, 0xe7, 0xc4, 0x3d, 0x12, 0x4d, 0x63, 0x5e, 0x74,
				0x2a, 0x3a, 0x08, 0x4b, 0x8d, 0x09, 0xfe, 0xee, 0x54, 0xea, 0x76, 0xaf, 0x57, 0x4c, 0xf3, 0x44,
				0x88, 0x7e, 0xfc, 0xba, 0x62, 0x2c, 0x6f, 0x49, 0x15, 0xba, 0x96, 0x65, 0xb3, 0x49, 0x0b, 0x00,
				0xd5, 0xd6, 0x84, 0x15, 0x35, 0xa1, 0x9c, 0xb0, 0x26, 0xa8, 0x31, 0xe8, 0x75, 0xff, 0x4d, 0xdb,
				0x17, 0x30, 0xa9, 0x13, 0x32, 0x9f, 0xa7, 0xe3, 0xb1, 0xed, 0x11, 0x7d, 0xfd, 0xb4, 0xd6, 0xba,
				0x2d, 0x2e, 0xca, 0x6b, 0x8e, 0x5f, 0x20, 0xff, 0x54, 0x2d, 0x6c, 0xd7, 0xd7, 0x98, 0xed, 0x77,
				0x05, 0xf1, 0xb5, 0xf7, 0xe1, 0xed, 0x14, 0xbf, 0x0c, 0x8a, 0xfe, 0xd9, 0x6d, 0x96, 0x95, 0x73,
				0xa1, 0x27, 0xe5, 0x26, 0x60, 0xd7, 0x76, 0xad, 0xda, 0x1b, 0x1a, 0xeb, 0xff, 0x0f, 0x14, 0x4b,
				0x87, 0x46, 0x7c, 0xb2, 0x09, 0xe2, 0xb7, 0x60, 0x81, 0x54, 0xca, 0x6a, 0x35, 0x1a, 0x25, 0x79,
				0xf3, 0xe8, 0x3f, 0xb3, 0x2b, 0xc5, 0xe2, 0x37, 0x60, 0x01, 0x4f, 0xab, 0x9d, 0xc2, 0x02, 0xef,
				0xbf, 0xaf, 0x3a, 0x85, 0xfa, 0xec, 0x61, 0x01, 0x23, 0xff, 0xdd, 0x03, 0xdf, 0x3b, 0x81, 0x53,
				0xb6, 0x42, 0x36, 0x50, 0xab, 0x8e, 0x97, 0x94, 0x33, 0xd4, 0x45, 0x70, 0x9b, 0x51, 0xe0, 0x7e,
				0xa7, 0x4e, 0x92, 0x18, 0x33, 0xb8, 0x18, 0x68, 0x9c, 0x14, 0x15, 0x27, 0x5a, 0x24, 0x30, 0xf8,
				0x26, 0x06, 0xea, 0x26, 0x78, 0xbb, 0x4f, 0x91, 0x30, 0x57, 0x04, 0x9a, 0xf5, 0x74, 0x9b, 0xc9,
				0x4d, 0xc5, 0xf0, 0xff, 0xeb, 0x0e, 0x3b, 0x8c, 0xe3, 0xf8, 0x50, 0xe5, 0x27, 0x75, 0x1e, 0xe0,
				0x83, 0x96, 0xf9, 0xcb, 0xe6, 0x36, 0x96, 0xf9, 0x50, 0xa0, 0x7f, 0xc9, 0x09, 0x16, 0x15, 0x3b,
				0x54, 0x67, 0xd0, 0x9b, 0xd5, 0xc2, 0xd3, 0x44, 0xae, 0x71, 0x27, 0x68, 0x7a, 0x01, 0x31, 0xe1,
				0x67, 0xd6, 0x77, 0x5d, 0x0c, 0xe0, 0x8b, 0x50, 0xaf, 0xb3, 0x3f, 0x75, 0xec, 0x67, 0x35, 0x52,
				0x60, 0x5f, 0x5e, 0xfd, 0x93, 0x00, 0x89, 0xbe, 0x27, 0xea, 0x15, 0x86, 0x33, 0x30, 0x4b, 0x7b,
				0x03, 0x7d, 0x1b, 0x7b, 0x89, 0x4d, 0x19, 0x12, 0x5e, 0x36, 0x90, 0x8e, 0xd2, 0x4b, 0x6b, 0x67,
				0x3a, 0x8e, 0xd9, 0x72, 0x7f, 0xba, 0x90, 0x4c, 0x8f, 0x01, 0x78, 0x26, 0xec, 0x5e, 0x69, 0xe7,
				0x34, 0x39, 0x3a, 0x9c, 0x03, 0x7d, 0xad, 0x9e, 0x18, 0x51, 0x4b, 0x83, 0xe6, 0x2e, 0x6d, 0x2e,
				0x04, 0xb4, 0xf6, 0xdc, 0x06, 0x6a, 0x93, 0x90, 0x12, 0x85, 0xeb, 0xf6, 0x38, 0x4f, 0x31, 0xb0,
				0x43, 0x89, 0xde, 0x60, 0xba, 0xe0, 0xe9, 0x59, 0x90, 0x69, 0x42, 0x84, 0x38, 0x39, 0xfa, 0x6c,
				0x88, 0xf2, 0x22, 0xc0, 0xa5, 0x1a, 0xae, 0x9a, 0x3a, 0x72, 0x29, 0x95, 0x85, 0xae, 0x39, 0x58,
				0x99, 0xac, 0x0d, 0xac, 0xce, 0x55, 0xee, 0xc7, 0x8c, 0x0e, 0x2b, 0x85, 0xd1, 0xed, 0x44, 0x92,
				0x6f, 0x86, 0x64, 0xdf, 0xc4, 0x2a, 0x75, 0xd2, 0xcb, 0x04, 0xe9, 0xa0, 0xc2, 0xa6, 0x4f, 0x76,
				0x35, 0x97, 0xc2, 0x5c, 0x6f, 0x34, 0x9d, 0xe8, 0x49, 0xca, 0xc3, 0xc2, 0xaf, 0x21, 0xa2, 0xf4,
				0x6b, 0xc6, 0x9a, 0x60, 0x91, 0x8a, 0x29, 0x0a, 0xac, 0x6b, 0xe5, 0xb0, 0x54, 0x29, 0x4e, 0xae,
				0x4a, 0x7d, 0xd5, 0x21, 0xba, 0x1e, 0x55, 0x89, 0x58, 0xdf, 0xf9, 0xd4, 0xdc, 0x2c, 0xbf, 0xde,
				0xd8, 0x1f, 0x8f, 0x45, 0x1b, 0xe4, 0xd0, 0x4c, 0x1f, 0x4a, 0x28, 0x93, 0x3a, 0x40, 0x8d, 0xd9,
				0xa6, 0x9c, 0x09, 0x21, 0x35, 0xcb, 0x81, 0xab, 0x97, 0xbd, 0x29, 0x23, 0x56, 0x8e, 0x68, 0x21,
				0x4b, 0x49, 0xa2, 0x54, 0xaf, 0xeb, 0x2d, 0x00, 0x30, 0xed, 0x7f, 0x90, 0x02, 0xa6, 0x19, 0x8e,
				0xda, 0xda, 0xe2, 0xd6, 0x77, 0xeb, 0x17, 0x00, 0x5f, 0xef, 0x0c, 0x8a, 0x85, 0xfe, 0x8b, 0x04,
				0x34, 0xe5, 0x19, 0x88, 0x49, 0x71, 0x75, 0x3e, 0xc8, 0x62, 0x7b, 0xc6, 0xc3, 0x1b, 0xc9, 0xdb,
				0xde, 0x87, 0x9a, 0xd5, 0xd5, 0x52, 0x62, 0x77, 0xfe, 0x0a, 0x5b, 0xbe, 0x06, 0x79, 0xfd, 0x3e,
				0xac, 0x4c, 0x90, 0xc3, 0xd4, 0x32, 0x3c, 0xfc, 0xc6, 0xe6, 0x9d, 0x8e, 0x01, 0x15, 0xde, 0x7a,
				0xcc, 0xa3, 0xc5, 0xde,
				// 0xff, 0xff,
			},
			timeSync: OutboundInverterTimeSyncPacket{
				OutboundEnvelopeTS: OutboundEnvelopeTS{
					DeviceID:     [8]byte{0x35, 0x33, 0x30, 0x30, 0x30, 0x44, 0x53, 0x43},
					DeviceSerial: [8]byte([]byte(testDeviceSerial)),
				},
				OutboundInverterTimeSync: OutboundInverterTimeSync{},
			},
		},
	}
	for name, tc := range testCases {
		t.Run(name, func(tt *testing.T) {
			var timeSync OutboundInverterTimeSyncPacket
			assert.NoError(tt, timeSync.UnmarshalBinary(tc.input), name)
			assert.Equal(tt, timeSync.DeviceID, tc.timeSync.DeviceID, name)
			assert.Equal(tt, timeSync.DeviceSerial, tc.timeSync.DeviceSerial, name)
		})
	}
}
