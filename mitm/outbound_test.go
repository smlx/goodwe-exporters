package mitm

import (
	"bufio"
	"bytes"
	"context"
	"encoding/binary"
	"fmt"
	"io"
	"log/slog"
	"net"
	"os"
	"testing"
	"time"

	"github.com/alecthomas/assert/v2"
	"golang.org/x/sync/errgroup"
)

const (
	testTimeSyncSerial = "01234-56-7890abc"
	testDeviceSerial   = "01234567"
)

// deviceSerialOutbound is a helper function which parses the given
// outbound packet data and returns the DeviceSerial field.
func deviceSerialOutbound(data []byte) ([]byte, error) {
	header := OutboundHeader{}
	buf := bytes.NewBuffer(data)
	if err := binary.Read(buf, binary.BigEndian, &header); err != nil {
		return nil, fmt.Errorf("couldn't read header: %v", err)
	}
	// the switch here is required due to the inconsistent envelope fields
	// between different outbound packet types.
	switch header.PacketType {
	case meterTimeSync, meterMetrics0, meterMetrics1:
		envelope := OutboundEnvelopeTS{}
		if err := binary.Read(buf, binary.BigEndian, &envelope); err != nil {
			return nil, fmt.Errorf("couldn't read envelope: %v", err)
		}
		return envelope.DeviceSerial[:], nil
	case meterTimeSyncRespAck, inverterTimeSyncRespAck:
		envelope := OutboundEnvelope{}
		if err := binary.Read(buf, binary.BigEndian, &envelope); err != nil {
			return nil, fmt.Errorf("couldn't read envelope: %v", err)
		}
		return envelope.DeviceSerial[:], nil
	default:
		return nil, fmt.Errorf("unknown packet type")
	}
}

func TestHandleOutboundPacket(t *testing.T) {
	var testCases = map[string]struct {
		input       []byte
		expectError bool
	}{
		"metrics": {
			input: []byte{
				0x50, 0x4f, 0x53, 0x54, 0x47, 0x57, 0x00, 0x00, 0x00, 0x99, 0x03, 0x04, 0x00, 0x00, 0x39, 0x31,
				0x30, 0x30, 0x30, 0x48, 0x4b, 0x55, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x17, 0x09,
				0x12, 0x09, 0x09, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x09,
				0x12, 0x09, 0x09, 0x1b, 0xde, 0xde, 0x93, 0x57, 0xfe, 0x05, 0x28, 0x76, 0x42, 0xac, 0x63, 0xcf,
				0xdd, 0x7a, 0xae, 0x6d, 0xca, 0x77, 0x85, 0xca, 0x23, 0x99, 0x4c, 0x72, 0x7d, 0x33, 0x59, 0x81,
				0x3b, 0xc8, 0xf2, 0x37, 0x22, 0x69, 0x71, 0x9d, 0xc8, 0x46, 0x62, 0xa2, 0xc0, 0xef, 0xe7, 0x44,
				0xb3, 0x58, 0x2a, 0x2f, 0xbd, 0x2f, 0x68, 0x4c, 0xe0, 0x98, 0x0b, 0x24, 0xbf, 0x04, 0xc4, 0x4f,
				0xa8, 0x01, 0x81, 0x8c, 0xf6, 0x5f, 0x05, 0x52, 0x73, 0x86, 0x32, 0xaa, 0x16, 0xd2, 0x9f, 0xfe,
				0x0e, 0x52, 0xb3, 0xcc, 0x9f, 0x0a, 0xaf, 0xef, 0x6d, 0x28, 0xce, 0xad, 0x52, 0xe7, 0x9f, 0x7f,
				0x9b, 0xe3, 0x3c, 0xa0, 0x1b, 0x22, 0xc9, 0x59, 0x33, 0x04, 0xf2, 0x39, 0x8d, 0xd1, 0x20, 0xfc,
				0x88, 0xaa, 0x1d, 0x99, 0x4b, 0xcd,
			},
			expectError: false,
		},
		"invalid metrics": {
			input: []byte{
				0x50, 0x4f, 0x53, 0x54, 0x47, 0x57, 0x00, 0x00, 0x00, 0x99, 0x03, 0x04, 0x00, 0x00, 0x39, 0x31,
				0x30, 0x30, 0x30, 0x48, 0x4b, 0x55, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x17, 0x09,
				// 0x12, 0x09, 0x09, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x09,
				0x12, 0x09, 0x09, 0x1b, 0xde, 0xde, 0x93, 0x57, 0xfe, 0x05, 0x28, 0x76, 0x42, 0xac, 0x63, 0xcf,
				0xdd, 0x7a, 0xae, 0x6d, 0xca, 0x77, 0x85, 0xca, 0x23, 0x99, 0x4c, 0x72, 0x7d, 0x33, 0x59, 0x81,
				0x3b, 0xc8, 0xf2, 0x37, 0x22, 0x69, 0x71, 0x9d, 0xc8, 0x46, 0x62, 0xa2, 0xc0, 0xef, 0xe7, 0x44,
				0xb3, 0x58, 0x2a, 0x2f, 0xbd, 0x2f, 0x68, 0x4c, 0xe0, 0x98, 0x0b, 0x24, 0xbf, 0x04, 0xc4, 0x4f,
				0xa8, 0x01, 0x81, 0x8c, 0xf6, 0x5f, 0x05, 0x52, 0x73, 0x86, 0x32, 0xaa, 0x16, 0xd2, 0x9f, 0xfe,
				0x0e, 0x52, 0xb3, 0xcc, 0x9f, 0x0a, 0xaf, 0xef, 0x6d, 0x28, 0xce, 0xad, 0x52, 0xe7, 0x9f, 0x7f,
				0x9b, 0xe3, 0x3c, 0xa0, 0x1b, 0x22, 0xc9, 0x59, 0x33, 0x04, 0xf2, 0x39, 0x8d, 0xd1, 0x20, 0xfc,
				0x88, 0xaa, 0x1d, 0x99, 0x4b, 0xcd,
			},
			expectError: true,
		},
		"time sync": {
			input: []byte{
				0x50, 0x4f, 0x53, 0x54, 0x47, 0x57, 0x00, 0x00, 0x00, 0x89, 0x03, 0x03, 0x00, 0x00, 0x39, 0x31,
				0x30, 0x30, 0x30, 0x48, 0x4b, 0x55, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x17, 0x0a,
				0x1e, 0x0e, 0x14, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x0a,
				0x1e, 0x0e, 0x14, 0x11, 0x15, 0x03, 0x6e, 0x21, 0x65, 0xf4, 0x5c, 0xfb, 0x95, 0x7f, 0xc0, 0x74,
				0x5c, 0xd0, 0x0a, 0x09, 0x62, 0x64, 0xa5, 0x98, 0x81, 0x05, 0xda, 0x21, 0xcd, 0x1c, 0xae, 0x60,
				0x90, 0x2f, 0xde, 0x42, 0x5e, 0x93, 0x24, 0x23, 0xd1, 0x4c, 0x7a, 0xa2, 0xc7, 0xe4, 0xbb, 0xfd,
				0xd4, 0xdb, 0xb3, 0x43, 0x3b, 0x34, 0x1a, 0x63, 0x0c, 0x8b, 0xc4, 0x74, 0x6e, 0xb4, 0x39, 0x66,
				0x44, 0x0d, 0xa5, 0xe0, 0xc0, 0x07, 0xf8, 0x29, 0xec, 0x50, 0x61, 0xf5, 0x4c, 0x6d, 0x4c, 0x15,
				0x6e, 0x14, 0x00, 0x9f, 0x43, 0x82, 0x63, 0xca, 0xd6, 0x4f, 0x3f, 0x98, 0x07, 0x3f, 0x9e, 0xcb,
				0x94, 0xe2, 0xd9, 0x6c, 0xf9, 0x69,
			},
			expectError: false,
		},
		"meter time sync response ack": {
			input: []byte{
				0x50, 0x4f, 0x53, 0x54, 0x47, 0x57, 0x00, 0x00, 0x00, 0x31, 0x03, 0x10, 0x39, 0x31, 0x30, 0x30,
				0x30, 0x48, 0x4b, 0x55, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x17, 0x0b, 0x05, 0x0e,
				0x0c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcb, 0xef, 0x10, 0xd3,
				0x6c, 0x1e, 0xa8, 0x34, 0x83, 0x2b, 0x7b, 0x7d, 0x9a, 0x1b, 0x22, 0x16, 0x03, 0xb6,
			},
			expectError: false,
		},
		"inverter time sync response ack": {
			input: []byte{
				0x50, 0x4f, 0x53, 0x54, 0x47, 0x57, 0x00, 0x00, 0x00, 0x31, 0x01, 0x10, 0x35, 0x33, 0x30, 0x30,
				0x30, 0x44, 0x53, 0x43, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x17, 0x0c, 0x16, 0x0b,
				0x34, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x80, 0xa0, 0x7c,
				0x27, 0x32, 0xc8, 0x98, 0x5b, 0x8d, 0x52, 0xdf, 0xfe, 0x86, 0x18, 0x6d, 0x63, 0x52,
			},
			expectError: false,
		},
	}
	ctx := context.Background()
	log := slog.New(slog.NewJSONHandler(os.Stderr,
		&slog.HandlerOptions{Level: slog.LevelDebug}))
	ph := NewOutboundPacketHandler(false)
	for name, tc := range testCases {
		t.Run(name, func(tt *testing.T) {
			_, _, err := ph.HandlePacket(ctx, log, tc.input)
			if tc.expectError {
				assert.Error(tt, err, name)
			} else {
				assert.NoError(tt, err, name)
			}
			// ensure test values are used
			deviceSerial, err := deviceSerialOutbound(tc.input)
			assert.NoError(tt, err, name)
			assert.Equal(tt, []byte(testDeviceSerial), deviceSerial, name)
		})
	}
}

func TestHandleOutbound(t *testing.T) {
	var testCases = map[string]struct {
		input         []byte
		expectForward bool
	}{
		"single valid packet": {
			input: []byte{
				0x50, 0x4f, 0x53, 0x54, 0x47, 0x57, 0x00, 0x00, 0x00, 0x99, 0x03, 0x04, 0x00, 0x00, 0x39, 0x31,
				0x30, 0x30, 0x30, 0x48, 0x4b, 0x55, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x17, 0x09,
				0x12, 0x09, 0x09, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x09,
				0x12, 0x09, 0x09, 0x1b, 0xde, 0xde, 0x93, 0x57, 0xfe, 0x05, 0x28, 0x76, 0x42, 0xac, 0x63, 0xcf,
				0xdd, 0x7a, 0xae, 0x6d, 0xca, 0x77, 0x85, 0xca, 0x23, 0x99, 0x4c, 0x72, 0x7d, 0x33, 0x59, 0x81,
				0x3b, 0xc8, 0xf2, 0x37, 0x22, 0x69, 0x71, 0x9d, 0xc8, 0x46, 0x62, 0xa2, 0xc0, 0xef, 0xe7, 0x44,
				0xb3, 0x58, 0x2a, 0x2f, 0xbd, 0x2f, 0x68, 0x4c, 0xe0, 0x98, 0x0b, 0x24, 0xbf, 0x04, 0xc4, 0x4f,
				0xa8, 0x01, 0x81, 0x8c, 0xf6, 0x5f, 0x05, 0x52, 0x73, 0x86, 0x32, 0xaa, 0x16, 0xd2, 0x9f, 0xfe,
				0x0e, 0x52, 0xb3, 0xcc, 0x9f, 0x0a, 0xaf, 0xef, 0x6d, 0x28, 0xce, 0xad, 0x52, 0xe7, 0x9f, 0x7f,
				0x9b, 0xe3, 0x3c, 0xa0, 0x1b, 0x22, 0xc9, 0x59, 0x33, 0x04, 0xf2, 0x39, 0x8d, 0xd1, 0x20, 0xfc,
				0x88, 0xaa, 0x1d, 0x99, 0x4b, 0xcd,
			},
			expectForward: true,
		},
		"multiple valid packets": {
			input: []byte{
				0x50, 0x4f, 0x53, 0x54, 0x47, 0x57, 0x00, 0x00, 0x00, 0x99, 0x03, 0x04, 0x00, 0x00, 0x39, 0x31,
				0x30, 0x30, 0x30, 0x48, 0x4b, 0x55, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x17, 0x09,
				0x12, 0x09, 0x09, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x09,
				0x12, 0x09, 0x09, 0x1b, 0xde, 0xde, 0x93, 0x57, 0xfe, 0x05, 0x28, 0x76, 0x42, 0xac, 0x63, 0xcf,
				0xdd, 0x7a, 0xae, 0x6d, 0xca, 0x77, 0x85, 0xca, 0x23, 0x99, 0x4c, 0x72, 0x7d, 0x33, 0x59, 0x81,
				0x3b, 0xc8, 0xf2, 0x37, 0x22, 0x69, 0x71, 0x9d, 0xc8, 0x46, 0x62, 0xa2, 0xc0, 0xef, 0xe7, 0x44,
				0xb3, 0x58, 0x2a, 0x2f, 0xbd, 0x2f, 0x68, 0x4c, 0xe0, 0x98, 0x0b, 0x24, 0xbf, 0x04, 0xc4, 0x4f,
				0xa8, 0x01, 0x81, 0x8c, 0xf6, 0x5f, 0x05, 0x52, 0x73, 0x86, 0x32, 0xaa, 0x16, 0xd2, 0x9f, 0xfe,
				0x0e, 0x52, 0xb3, 0xcc, 0x9f, 0x0a, 0xaf, 0xef, 0x6d, 0x28, 0xce, 0xad, 0x52, 0xe7, 0x9f, 0x7f,
				0x9b, 0xe3, 0x3c, 0xa0, 0x1b, 0x22, 0xc9, 0x59, 0x33, 0x04, 0xf2, 0x39, 0x8d, 0xd1, 0x20, 0xfc,
				0x88, 0xaa, 0x1d, 0x99, 0x4b, 0xcd,
				0x50, 0x4f, 0x53, 0x54, 0x47, 0x57, 0x00, 0x00, 0x00, 0x99, 0x03, 0x04, 0x00, 0x00, 0x39, 0x31,
				0x30, 0x30, 0x30, 0x48, 0x4b, 0x55, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x17, 0x09,
				0x12, 0x09, 0x09, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x09,
				0x12, 0x09, 0x09, 0x1b, 0xde, 0xde, 0x93, 0x57, 0xfe, 0x05, 0x28, 0x76, 0x42, 0xac, 0x63, 0xcf,
				0xdd, 0x7a, 0xae, 0x6d, 0xca, 0x77, 0x85, 0xca, 0x23, 0x99, 0x4c, 0x72, 0x7d, 0x33, 0x59, 0x81,
				0x3b, 0xc8, 0xf2, 0x37, 0x22, 0x69, 0x71, 0x9d, 0xc8, 0x46, 0x62, 0xa2, 0xc0, 0xef, 0xe7, 0x44,
				0xb3, 0x58, 0x2a, 0x2f, 0xbd, 0x2f, 0x68, 0x4c, 0xe0, 0x98, 0x0b, 0x24, 0xbf, 0x04, 0xc4, 0x4f,
				0xa8, 0x01, 0x81, 0x8c, 0xf6, 0x5f, 0x05, 0x52, 0x73, 0x86, 0x32, 0xaa, 0x16, 0xd2, 0x9f, 0xfe,
				0x0e, 0x52, 0xb3, 0xcc, 0x9f, 0x0a, 0xaf, 0xef, 0x6d, 0x28, 0xce, 0xad, 0x52, 0xe7, 0x9f, 0x7f,
				0x9b, 0xe3, 0x3c, 0xa0, 0x1b, 0x22, 0xc9, 0x59, 0x33, 0x04, 0xf2, 0x39, 0x8d, 0xd1, 0x20, 0xfc,
				0x88, 0xaa, 0x1d, 0x99, 0x4b, 0xcd,
			},
			expectForward: true,
		},
		"invalid packet": {
			input: []byte{
				0x50, 0x4f, 0x53, 0x54, 0x47, 0x57, 0x00, 0x00, 0x00, 0x99, 0x03, 0x04, 0x00, 0x00, 0x39, 0x31,
				0x30, 0x30, 0x30, 0x48, 0x4b, 0x55, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x17, 0x09,
				// 0x12, 0x09, 0x09, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x09,
				0x12, 0x09, 0x09, 0x1b, 0xde, 0xde, 0x93, 0x57, 0xfe, 0x05, 0x28, 0x76, 0x42, 0xac, 0x63, 0xcf,
				0xdd, 0x7a, 0xae, 0x6d, 0xca, 0x77, 0x85, 0xca, 0x23, 0x99, 0x4c, 0x72, 0x7d, 0x33, 0x59, 0x81,
				0x3b, 0xc8, 0xf2, 0x37, 0x22, 0x69, 0x71, 0x9d, 0xc8, 0x46, 0x62, 0xa2, 0xc0, 0xef, 0xe7, 0x44,
				0xb3, 0x58, 0x2a, 0x2f, 0xbd, 0x2f, 0x68, 0x4c, 0xe0, 0x98, 0x0b, 0x24, 0xbf, 0x04, 0xc4, 0x4f,
				0xa8, 0x01, 0x81, 0x8c, 0xf6, 0x5f, 0x05, 0x52, 0x73, 0x86, 0x32, 0xaa, 0x16, 0xd2, 0x9f, 0xfe,
				0x0e, 0x52, 0xb3, 0xcc, 0x9f, 0x0a, 0xaf, 0xef, 0x6d, 0x28, 0xce, 0xad, 0x52, 0xe7, 0x9f, 0x7f,
				0x9b, 0xe3, 0x3c, 0xa0, 0x1b, 0x22, 0xc9, 0x59, 0x33, 0x04, 0xf2, 0x39, 0x8d, 0xd1, 0x20, 0xfc,
				0x88, 0xaa, 0x1d, 0x99, 0x4b, 0xcd,
			},
			expectForward: true,
		},
	}
	log := slog.New(slog.NewJSONHandler(os.Stderr,
		&slog.HandlerOptions{Level: slog.LevelDebug}))
	for name, tc := range testCases {
		t.Run(name, func(tt *testing.T) {
			// copy loop variables for closures
			name := name
			tc := tc
			// parallelize test cases so this test will complete in a timely manner
			tt.Parallel()
			// mock conns
			upstreamRead, upstreamWrite := net.Pipe()
			clientRead, clientWrite := net.Pipe()
			// set up context, and ensure it times out
			ctx, cancel := context.WithTimeout(context.Background(), 2*readTimeout)
			defer cancel()
			// set up the reader since pipe blocks writes otherwise
			var eg errgroup.Group
			buf := &bytes.Buffer{}
			eg.Go(func() error {
				// read into buf until the context expires
				for {
					if ctx.Err() != nil {
						return nil
					}
					if err := upstreamRead.SetReadDeadline(time.Now().Add(readTimeout)); err != nil {
						tt.Fatal(err)
					}
					if _, err := io.Copy(buf, upstreamRead); err != nil {
						if netErr, ok := err.(net.Error); ok && netErr.Timeout() {
							continue
						}
						return err
					}
				}
			})
			// write to conn
			eg.Go(func() error {
				_, err := clientWrite.Write(tc.input)
				return err
			})
			// test the function
			mitmSrv := NewServer(false, true)
			assert.NoError(tt, mitmSrv.handleConn(ctx, log, clientRead, upstreamWrite,
				outboundPrefix, true, NewOutboundPacketHandler(false)), name)
			if err := eg.Wait(); err != nil {
				tt.Fatal(err)
			}
			// validate upstream output
			if tc.expectForward {
				assert.Equal(tt, tc.input, buf.Bytes())
			} else {
				assert.Equal(tt, []byte{}, buf.Bytes())
			}
			// slice up the input into packets and ensure test values are used
			var deviceSerial []byte
			testBuf := bufio.NewReader(bytes.NewBuffer(tc.input))
			packet, err := readPacket(testBuf, outboundPrefix)
			for ; len(packet) > 0; packet, err = readPacket(testBuf, outboundPrefix) {
				assert.NoError(tt, err, name)
				deviceSerial, err = deviceSerialOutbound(packet)
				assert.NoError(tt, err, name)
				assert.Equal(tt, []byte(testDeviceSerial), deviceSerial, name)
			}
			// last call to readPacket returns an error due to being unable to peek
			assert.Error(tt, err, name)
		})
	}
}
