package mitm

import (
	"fmt"
	"log/slog"
	"slices"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

var (
	// define meter metrics
	meterPowerGenerationWatts = promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "meter_power_generation_watts",
		Help: "Power generated by PV array. " +
			"Small negative values are a measurement error. This value is [0,Inf.).",
	}, labelNames)
	meterPowerExportWatts = promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "meter_power_export_watts",
		Help: "Power exported to the grid. " +
			"Negative values indicate power is being imported.",
	}, labelNames)
	// other useful metrics
	meterEnergyGenerationDecawattHoursTotal = promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "meter_energy_generation_decawatt_hours_total",
		Help: "Cumulative energy generated.",
	}, labelNames)
	meterEnergyExportDecawattHoursTotal = promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "meter_energy_export_decawatt_hours_total",
		Help: "Cumulative energy exported. " +
			"When energy is imported, this value is static.",
	}, labelNames)
	meterEnergyImportDecawattHoursTotal = promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "meter_energy_import_decawatt_hours_total",
		Help: "Cumulative energy imported. " +
			"When energy is exported, this value is static.",
	}, labelNames)
	// less useful and unknown metrics
	meterSumOfEnergyImportLessGenerationDecawattHoursTotal = promauto.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "meter_sum_of_energy_import_less_generation_decawatt_hours_total",
			Help: "Sum of energy import less generation. " +
				"Not particularly useful since it only increases while energy import is greater than generation.",
		}, labelNames)
	meterSumOfPowerGenerationAndExportWatts = promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "meter_sum_of_power_generation_and_export_watts",
		Help: "Sum of power generation and export. " +
			"Not particularly useful since it can double-count generated power.",
	}, labelNames)
	meterSumOfEnergyGenerationAndExportDecawattHoursTotal = promauto.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "meter_sum_of_energy_generation_and_export_decawatt_hours_total",
			Help: "Sum of energy generation and export. " +
				"Not particularly useful since it can double-count generated energy.",
		}, labelNames)
	meterUnknownInt5 = promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "meter_unknown_int_5",
	}, labelNames)
	meterUnknownInt6 = promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "meter_unknown_int_6",
	}, labelNames)
	meterUnknownInt7 = promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "meter_unknown_int_7",
	}, labelNames)
	meterUnknownInt8 = promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "meter_unknown_int_8",
	}, labelNames)
	meterUnknownInt9 = promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "meter_unknown_int_9",
	}, labelNames)
	meterUnknownInt10 = promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "meter_unknown_int_10",
	}, labelNames)
	meterUnknownInt11 = promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "meter_unknown_int_11",
	}, labelNames)
	meterUnknownInt12 = promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "meter_unknown_int_12",
	}, labelNames)
	// exporter internal metrics
	meterTimeSyncPacketsTotal = promauto.NewCounterVec(prometheus.CounterOpts{
		Name: "meter_time_sync_packets_total",
		Help: "Count of outbound time sync packets.",
	}, labelNames)
	meterTimeSyncAckPacketsTotal = promauto.NewCounterVec(prometheus.CounterOpts{
		Name: "meter_time_sync_ack_packets_total",
		Help: "Count of outbound time sync acknowledgement packets.",
	}, labelNames)
	meterMetricsPacketsTotal = promauto.NewCounterVec(prometheus.CounterOpts{
		Name: "meter_metrics_packets_total",
		Help: "Count of outbound metrics packets.",
	}, labelNames)
)

// handleMeterTimeSyncPacket handles time sync packet envelope and ciphertext.
func handleMeterTimeSyncPacket(
	data []byte,
	log *slog.Logger,
) error {
	var timeSync OutboundMeterTimeSyncPacket
	err := timeSync.UnmarshalBinary(data)
	if err != nil {
		return fmt.Errorf("couldn't unmarshal time sync: %v", err)
	}
	di, ok := deviceInfo[timeSync.DeviceID]
	if !ok {
		return fmt.Errorf("unknown device ID: %v", timeSync.DeviceID)
	}
	log.Debug("outbound time sync",
		slog.String("device", di[0]),
		slog.String("model", di[1]),
		slog.String("serial", string(timeSync.DeviceSerial[:])))
	meterTimeSyncPacketsTotal.With(prometheus.Labels{
		"device": di[0],
		"model":  di[1],
		"serial": string(timeSync.DeviceSerial[:]),
	}).Inc()
	return nil
}

// handleMeterMetricsPacket handles metrics packet envelope and ciphertext.
func handleMeterMetricsPacket(
	data []byte,
	log *slog.Logger,
) (*OutboundMeterMetricsPacket, error) {
	var metrics OutboundMeterMetricsPacket
	err := metrics.UnmarshalBinary(data)
	if err != nil {
		return nil, fmt.Errorf("couldn't unmarshal metrics: %v", err)
	}
	di, ok := deviceInfo[metrics.DeviceID]
	if !ok {
		return nil, fmt.Errorf("unknown device ID: %v", metrics.DeviceID)
	}
	log.Debug("outbound metrics",
		slog.String("device", di[0]),
		slog.String("model", di[1]),
		slog.String("serial", string(metrics.DeviceSerial[:])))
	labels := prometheus.Labels{
		"device": di[0],
		"model":  di[1],
		"serial": string(metrics.DeviceSerial[:]),
	}
	// record metrics
	meterPowerGenerationWatts.With(labels).Set(
		float64(metrics.PowerGenerationWatts))
	meterPowerExportWatts.With(labels).Set(
		float64(metrics.PowerExportWatts))
	meterEnergyGenerationDecawattHoursTotal.With(labels).Set(
		float64(metrics.EnergyGenerationDecawattHoursTotal))
	meterEnergyExportDecawattHoursTotal.With(labels).Set(
		float64(metrics.EnergyExportDecawattHoursTotal))
	meterEnergyImportDecawattHoursTotal.With(labels).Set(
		float64(metrics.EnergyImportDecawattHoursTotal))
	meterSumOfEnergyImportLessGenerationDecawattHoursTotal.With(labels).Set(
		float64(metrics.SumOfEnergyImportLessGenerationDecawattHoursTotal))
	meterSumOfPowerGenerationAndExportWatts.With(labels).Set(
		float64(metrics.SumOfPowerGenerationAndExportWatts))
	meterSumOfEnergyGenerationAndExportDecawattHoursTotal.With(labels).Set(
		float64(metrics.SumOfEnergyGenerationAndExportDecawattHoursTotal))
	meterUnknownInt5.With(labels).Set(float64(metrics.UnknownInt5))
	meterUnknownInt6.With(labels).Set(float64(metrics.UnknownInt6))
	meterUnknownInt7.With(labels).Set(float64(metrics.UnknownInt7))
	meterUnknownInt8.With(labels).Set(float64(metrics.UnknownInt8))
	meterUnknownInt9.With(labels).Set(float64(metrics.UnknownInt9))
	meterUnknownInt10.With(labels).Set(float64(metrics.UnknownInt10))
	meterUnknownInt11.With(labels).Set(float64(metrics.UnknownInt11))
	meterUnknownInt12.With(labels).Set(float64(metrics.UnknownInt12))
	// record internal metrics
	meterMetricsPacketsTotal.With(labels).Inc()
	return &metrics, nil
}

// handleTimeSyncRespAckPacket handles time sync response ack packet
// envelope and ciphertext.
func handleTimeSyncRespAckPacket(
	data []byte,
	log *slog.Logger,
) error {
	var timeSyncRespAck OutboundTimeSyncRespAckPacket
	err := timeSyncRespAck.UnmarshalBinary(data)
	if err != nil {
		return fmt.Errorf("couldn't unmarshal time sync: %v", err)
	}
	di, ok := deviceInfo[timeSyncRespAck.DeviceID]
	if !ok {
		return fmt.Errorf("unknown device ID: %v", timeSyncRespAck.DeviceID)
	}
	if !slices.Equal(timeSyncRespAckData, timeSyncRespAck.Data[:]) {
		log.Debug("unknown cleartext in timeSyncRespAck",
			slog.Any("cleartext", timeSyncRespAck.Data[:]))
	}
	log.Debug("outbound time sync response ack",
		slog.String("device", di[0]),
		slog.String("model", di[1]),
		slog.String("serial", string(timeSyncRespAck.DeviceSerial[:])))
	meterTimeSyncAckPacketsTotal.With(prometheus.Labels{
		"device": di[0],
		"model":  di[1],
		"serial": string(timeSyncRespAck.DeviceSerial[:]),
	}).Inc()
	return nil
}
